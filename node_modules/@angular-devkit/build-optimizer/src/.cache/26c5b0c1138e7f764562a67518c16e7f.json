{"remainingRequest":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Git Projects\\Standar Portal\\node_modules\\ngx-popover\\PopoverContent.js","dependencies":[{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\ngx-popover\\PopoverContent.js","mtime":1484732162000},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624878985141},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nvar core_1 = require(\"@angular/core\");\nvar PopoverContent = (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function PopoverContent(element, cdr, renderer) {\n        var _this = this;\n        this.element = element;\n        this.cdr = cdr;\n        this.renderer = renderer;\n        this.placement = \"bottom\";\n        this.animation = true;\n        this.closeOnClickOutside = false;\n        this.closeOnMouseOutside = false;\n        this.onCloseFromOutside = new core_1.EventEmitter();\n        this.top = -10000;\n        this.left = -10000;\n        this.isIn = false;\n        this.displayType = \"none\";\n        // -------------------------------------------------------------------------\n        // Anonymous \n        // -------------------------------------------------------------------------\n        /**\n         * Closes dropdown if user clicks outside of this directive.\n         */\n        this.onDocumentMouseDown = function (event) {\n            var element = _this.element.nativeElement;\n            if (!element || !_this.popover)\n                return;\n            if (element.contains(event.target) || _this.popover.getElement().contains(event.target))\n                return;\n            _this.hide();\n            _this.onCloseFromOutside.emit(undefined);\n        };\n    }\n    PopoverContent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.closeOnClickOutside)\n            this.listenClickFunc = this.renderer.listenGlobal(\"document\", \"mousedown\", function (event) { return _this.onDocumentMouseDown(event); });\n        if (this.closeOnMouseOutside)\n            this.listenMouseFunc = this.renderer.listenGlobal(\"document\", \"mouseover\", function (event) { return _this.onDocumentMouseDown(event); });\n        this.show();\n        this.cdr.detectChanges();\n    };\n    PopoverContent.prototype.ngOnDestroy = function () {\n        if (this.closeOnClickOutside)\n            this.listenClickFunc();\n        if (this.closeOnMouseOutside)\n            this.listenMouseFunc();\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    PopoverContent.prototype.show = function () {\n        if (!this.popover || !this.popover.getElement())\n            return;\n        var p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);\n        this.displayType = \"block\";\n        this.top = p.top;\n        this.left = p.left;\n        this.isIn = true;\n    };\n    PopoverContent.prototype.hide = function () {\n        this.top = -10000;\n        this.left = -10000;\n        this.isIn = true;\n        this.popover.hide();\n    };\n    PopoverContent.prototype.hideFromPopover = function () {\n        this.top = -10000;\n        this.left = -10000;\n        this.isIn = true;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    PopoverContent.prototype.positionElements = function (hostEl, targetEl, positionStr, appendToBody) {\n        if (appendToBody === void 0) {\n            appendToBody = false;\n        }\n        var positionStrParts = positionStr.split(\"-\");\n        var pos0 = positionStrParts[0];\n        var pos1 = positionStrParts[1] || \"center\";\n        var hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);\n        var targetElWidth = targetEl.offsetWidth;\n        var targetElHeight = targetEl.offsetHeight;\n        this.effectivePlacement = pos0 = this.getEffectivePlacement(pos0, hostEl, targetEl);\n        var shiftWidth = {\n            center: function () {\n                return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;\n            },\n            left: function () {\n                return hostElPos.left;\n            },\n            right: function () {\n                return hostElPos.left + hostElPos.width;\n            }\n        };\n        var shiftHeight = {\n            center: function () {\n                return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;\n            },\n            top: function () {\n                return hostElPos.top;\n            },\n            bottom: function () {\n                return hostElPos.top + hostElPos.height;\n            }\n        };\n        var targetElPos;\n        switch (pos0) {\n            case \"right\":\n                targetElPos = {\n                    top: shiftHeight[pos1](),\n                    left: shiftWidth[pos0]()\n                };\n                break;\n            case \"left\":\n                targetElPos = {\n                    top: shiftHeight[pos1](),\n                    left: hostElPos.left - targetElWidth\n                };\n                break;\n            case \"bottom\":\n                targetElPos = {\n                    top: shiftHeight[pos0](),\n                    left: shiftWidth[pos1]()\n                };\n                break;\n            default:\n                targetElPos = {\n                    top: hostElPos.top - targetElHeight,\n                    left: shiftWidth[pos1]()\n                };\n                break;\n        }\n        return targetElPos;\n    };\n    PopoverContent.prototype.position = function (nativeEl) {\n        var offsetParentBCR = { top: 0, left: 0 };\n        var elBCR = this.offset(nativeEl);\n        var offsetParentEl = this.parentOffsetEl(nativeEl);\n        if (offsetParentEl !== window.document) {\n            offsetParentBCR = this.offset(offsetParentEl);\n            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;\n            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;\n        }\n        var boundingClientRect = nativeEl.getBoundingClientRect();\n        return {\n            width: boundingClientRect.width || nativeEl.offsetWidth,\n            height: boundingClientRect.height || nativeEl.offsetHeight,\n            top: elBCR.top - offsetParentBCR.top,\n            left: elBCR.left - offsetParentBCR.left\n        };\n    };\n    PopoverContent.prototype.offset = function (nativeEl) {\n        var boundingClientRect = nativeEl.getBoundingClientRect();\n        return {\n            width: boundingClientRect.width || nativeEl.offsetWidth,\n            height: boundingClientRect.height || nativeEl.offsetHeight,\n            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),\n            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft)\n        };\n    };\n    PopoverContent.prototype.getStyle = function (nativeEl, cssProp) {\n        if (nativeEl.currentStyle)\n            return nativeEl.currentStyle[cssProp];\n        if (window.getComputedStyle)\n            return window.getComputedStyle(nativeEl)[cssProp];\n        // finally try and get inline style\n        return nativeEl.style[cssProp];\n    };\n    PopoverContent.prototype.isStaticPositioned = function (nativeEl) {\n        return (this.getStyle(nativeEl, \"position\") || \"static\") === \"static\";\n    };\n    PopoverContent.prototype.parentOffsetEl = function (nativeEl) {\n        var offsetParent = nativeEl.offsetParent || window.document;\n        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {\n            offsetParent = offsetParent.offsetParent;\n        }\n        return offsetParent || window.document;\n    };\n    PopoverContent.prototype.getEffectivePlacement = function (placement, hostElement, targetElement) {\n        var placementParts = placement.split(\" \");\n        if (placementParts[0] !== \"auto\") {\n            return placement;\n        }\n        var hostElBoundingRect = hostElement.getBoundingClientRect();\n        var desiredPlacement = placementParts[1] || \"bottom\";\n        if (desiredPlacement === \"top\" && hostElBoundingRect.top - targetElement.offsetHeight < 0) {\n            return \"bottom\";\n        }\n        if (desiredPlacement === \"bottom\" && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {\n            return \"top\";\n        }\n        if (desiredPlacement === \"left\" && hostElBoundingRect.left - targetElement.offsetWidth < 0) {\n            return \"right\";\n        }\n        if (desiredPlacement === \"right\" && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {\n            return \"left\";\n        }\n        return desiredPlacement;\n    };\n    return PopoverContent;\n}());\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], PopoverContent.prototype, \"content\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], PopoverContent.prototype, \"placement\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], PopoverContent.prototype, \"title\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Boolean)\n], PopoverContent.prototype, \"animation\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Boolean)\n], PopoverContent.prototype, \"closeOnClickOutside\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Boolean)\n], PopoverContent.prototype, \"closeOnMouseOutside\", void 0);\n__decorate([\n    core_1.ViewChild(\"popoverDiv\"),\n    __metadata(\"design:type\", core_1.ElementRef)\n], PopoverContent.prototype, \"popoverDiv\", void 0);\nPopoverContent = __decorate([\n    core_1.Component({\n        selector: \"popover-content\",\n        template: \"\\n<div #popoverDiv class=\\\"popover {{ effectivePlacement }}\\\"\\n     [style.top]=\\\"top + 'px'\\\"\\n     [style.left]=\\\"left + 'px'\\\"\\n     [class.in]=\\\"isIn\\\"\\n     [class.fade]=\\\"animation\\\"\\n     style=\\\"display: block\\\"\\n     role=\\\"popover\\\">\\n    <div [hidden]=\\\"!closeOnMouseOutside\\\" class=\\\"virtual-area\\\"></div>\\n    <div class=\\\"arrow\\\"></div> \\n    <h3 class=\\\"popover-title\\\" [hidden]=\\\"!title\\\">{{ title }}</h3>\\n    <div class=\\\"popover-content\\\">\\n        <ng-content></ng-content>\\n        {{ content }}\\n    </div> \\n</div>\\n\",\n        styles: [\"\\n.popover .virtual-area {\\n    height: 11px;\\n    width: 100%;\\n    position: absolute;\\n}\\n.popover.top .virtual-area {\\n    bottom: -11px; \\n}\\n.popover.bottom .virtual-area {\\n    top: -11px; \\n}\\n.popover.left .virtual-area {\\n    right: -11px; \\n}\\n.popover.right .virtual-area {\\n    left: -11px; \\n}\\n\"]\n    })\n], PopoverContent);\nexports.PopoverContent = PopoverContent;\n",null]}