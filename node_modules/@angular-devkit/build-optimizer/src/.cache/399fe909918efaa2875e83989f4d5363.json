{"remainingRequest":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Git Projects\\Standar Portal\\node_modules\\ngx-bootstrap\\utils\\linked-list.class.js","dependencies":[{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\ngx-bootstrap\\utils\\linked-list.class.js","mtime":499162500000},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624878985141},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var LinkedList = /** @class */ /*@__PURE__*/ (function () {\r\n    function LinkedList() {\r\n        this.length = 0;\r\n        this.asArray = [];\r\n    }\r\n    LinkedList.prototype.get = function (position) {\r\n        if (this.length === 0 || position < 0 || position >= this.length) {\r\n            return void 0;\r\n        }\r\n        var current = this.head;\r\n        for (var index = 0; index < position; index++) {\r\n            current = current.next;\r\n        }\r\n        return current.value;\r\n    };\r\n    LinkedList.prototype.add = function (value, position) {\r\n        if (position === void 0) {\r\n            position = this.length;\r\n        }\r\n        if (position < 0 || position > this.length) {\r\n            throw new Error('Position is out of the list');\r\n        }\r\n        var node = {\r\n            value: value,\r\n            next: undefined,\r\n            previous: undefined\r\n        };\r\n        if (this.length === 0) {\r\n            this.head = node;\r\n            this.tail = node;\r\n            this.current = node;\r\n        }\r\n        else {\r\n            if (position === 0) {\r\n                // first node\r\n                node.next = this.head;\r\n                this.head.previous = node;\r\n                this.head = node;\r\n            }\r\n            else if (position === this.length) {\r\n                // last node\r\n                this.tail.next = node;\r\n                node.previous = this.tail;\r\n                this.tail = node;\r\n            }\r\n            else {\r\n                // node in middle\r\n                var currentPreviousNode = this.getNode(position - 1);\r\n                var currentNextNode = currentPreviousNode.next;\r\n                currentPreviousNode.next = node;\r\n                currentNextNode.previous = node;\r\n                node.previous = currentPreviousNode;\r\n                node.next = currentNextNode;\r\n            }\r\n        }\r\n        this.length++;\r\n        this.createInternalArrayRepresentation();\r\n    };\r\n    LinkedList.prototype.remove = function (position) {\r\n        if (position === void 0) {\r\n            position = 0;\r\n        }\r\n        if (this.length === 0 || position < 0 || position >= this.length) {\r\n            throw new Error('Position is out of the list');\r\n        }\r\n        if (position === 0) {\r\n            // first node\r\n            this.head = this.head.next;\r\n            if (this.head) {\r\n                // there is no second node\r\n                this.head.previous = undefined;\r\n            }\r\n            else {\r\n                // there is no second node\r\n                this.tail = undefined;\r\n            }\r\n        }\r\n        else if (position === this.length - 1) {\r\n            // last node\r\n            this.tail = this.tail.previous;\r\n            this.tail.next = undefined;\r\n        }\r\n        else {\r\n            // middle node\r\n            var removedNode = this.getNode(position);\r\n            removedNode.next.previous = removedNode.previous;\r\n            removedNode.previous.next = removedNode.next;\r\n        }\r\n        this.length--;\r\n        this.createInternalArrayRepresentation();\r\n    };\r\n    LinkedList.prototype.set = function (position, value) {\r\n        if (this.length === 0 || position < 0 || position >= this.length) {\r\n            throw new Error('Position is out of the list');\r\n        }\r\n        var node = this.getNode(position);\r\n        node.value = value;\r\n        this.createInternalArrayRepresentation();\r\n    };\r\n    LinkedList.prototype.toArray = function () {\r\n        return this.asArray;\r\n    };\r\n    LinkedList.prototype.findAll = function (fn) {\r\n        var current = this.head;\r\n        var result = [];\r\n        for (var index = 0; index < this.length; index++) {\r\n            if (fn(current.value, index)) {\r\n                result.push({ index: index, value: current.value });\r\n            }\r\n            current = current.next;\r\n        }\r\n        return result;\r\n    };\r\n    // Array methods overriding start\r\n    // Array methods overriding start\r\n    LinkedList.prototype.push =\r\n        // Array methods overriding start\r\n        function () {\r\n            var _this = this;\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            args.forEach(function (arg) {\r\n                _this.add(arg);\r\n            });\r\n            return this.length;\r\n        };\r\n    LinkedList.prototype.pop = function () {\r\n        if (this.length === 0) {\r\n            return undefined;\r\n        }\r\n        var last = this.tail;\r\n        this.remove(this.length - 1);\r\n        return last.value;\r\n    };\r\n    LinkedList.prototype.unshift = function () {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        args.reverse();\r\n        args.forEach(function (arg) {\r\n            _this.add(arg, 0);\r\n        });\r\n        return this.length;\r\n    };\r\n    LinkedList.prototype.shift = function () {\r\n        if (this.length === 0) {\r\n            return undefined;\r\n        }\r\n        var lastItem = this.head.value;\r\n        this.remove();\r\n        return lastItem;\r\n    };\r\n    LinkedList.prototype.forEach = function (fn) {\r\n        var current = this.head;\r\n        for (var index = 0; index < this.length; index++) {\r\n            fn(current.value, index);\r\n            current = current.next;\r\n        }\r\n    };\r\n    LinkedList.prototype.indexOf = function (value) {\r\n        var current = this.head;\r\n        var position = 0;\r\n        for (var index = 0; index < this.length; index++) {\r\n            if (current.value === value) {\r\n                position = index;\r\n                break;\r\n            }\r\n            current = current.next;\r\n        }\r\n        return position;\r\n    };\r\n    LinkedList.prototype.some = function (fn) {\r\n        var current = this.head;\r\n        var result = false;\r\n        while (current && !result) {\r\n            if (fn(current.value)) {\r\n                result = true;\r\n                break;\r\n            }\r\n            current = current.next;\r\n        }\r\n        return result;\r\n    };\r\n    LinkedList.prototype.every = function (fn) {\r\n        var current = this.head;\r\n        var result = true;\r\n        while (current && result) {\r\n            if (!fn(current.value)) {\r\n                result = false;\r\n            }\r\n            current = current.next;\r\n        }\r\n        return result;\r\n    };\r\n    LinkedList.prototype.toString = function () {\r\n        return '[Linked List]';\r\n    };\r\n    LinkedList.prototype.find = function (fn) {\r\n        var current = this.head;\r\n        var result;\r\n        for (var index = 0; index < this.length; index++) {\r\n            if (fn(current.value, index)) {\r\n                result = current.value;\r\n                break;\r\n            }\r\n            current = current.next;\r\n        }\r\n        return result;\r\n    };\r\n    LinkedList.prototype.findIndex = function (fn) {\r\n        var current = this.head;\r\n        var result;\r\n        for (var index = 0; index < this.length; index++) {\r\n            if (fn(current.value, index)) {\r\n                result = index;\r\n                break;\r\n            }\r\n            current = current.next;\r\n        }\r\n        return result;\r\n    };\r\n    LinkedList.prototype.getNode = function (position) {\r\n        if (this.length === 0 || position < 0 || position >= this.length) {\r\n            throw new Error('Position is out of the list');\r\n        }\r\n        var current = this.head;\r\n        for (var index = 0; index < position; index++) {\r\n            current = current.next;\r\n        }\r\n        return current;\r\n    };\r\n    LinkedList.prototype.createInternalArrayRepresentation = function () {\r\n        var outArray = [];\r\n        var current = this.head;\r\n        while (current) {\r\n            outArray.push(current.value);\r\n            current = current.next;\r\n        }\r\n        this.asArray = outArray;\r\n    };\r\n    return LinkedList;\r\n}());\r\nexport { LinkedList };\r\n//# sourceMappingURL=linked-list.class.js.map\r\n",null]}