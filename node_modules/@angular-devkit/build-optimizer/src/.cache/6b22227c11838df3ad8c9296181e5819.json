{"remainingRequest":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Git Projects\\Standar Portal\\node_modules\\ngx-bootstrap\\collapse\\collapse.directive.js","dependencies":[{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\ngx-bootstrap\\collapse\\collapse.directive.js","mtime":499162500000},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624878985141},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2 } from '@angular/core';\nvar CollapseDirective = /** @class */ /*@__PURE__*/ (function () {\n    function CollapseDirective(_el, _renderer) {\n        this._el = _el;\n        this._renderer = _renderer;\n        /** This event fires as soon as content collapses */\n        this.collapsed = new EventEmitter();\n        /** This event fires as soon as content becomes visible */\n        this.expanded = new EventEmitter();\n        // shown\n        this.isExpanded = true;\n        // hidden\n        this.isCollapsed = false;\n        // stale state\n        this.isCollapse = true;\n        // animation state\n        this.isCollapsing = false;\n    }\n    Object.defineProperty(CollapseDirective.prototype, \"collapse\", {\n        get: function () {\n            return this.isExpanded;\n        },\n        set: /** A flag indicating visibility of content (shown or hidden) */ function (value) {\n            this.isExpanded = value;\n            this.toggle();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** allows to manually toggle content visibility */\n    /** allows to manually toggle content visibility */\n    CollapseDirective.prototype.toggle = /** allows to manually toggle content visibility */\n        function () {\n            if (this.isExpanded) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        };\n    /** allows to manually hide content */\n    /** allows to manually hide content */\n    CollapseDirective.prototype.hide = /** allows to manually hide content */\n        function () {\n            this.isCollapse = false;\n            this.isCollapsing = true;\n            this.isExpanded = false;\n            this.isCollapsed = true;\n            this.isCollapse = true;\n            this.isCollapsing = false;\n            this.display = 'none';\n            this.collapsed.emit(this);\n        };\n    /** allows to manually show collapsed content */\n    /** allows to manually show collapsed content */\n    CollapseDirective.prototype.show = /** allows to manually show collapsed content */\n        function () {\n            this.isCollapse = false;\n            this.isCollapsing = true;\n            this.isExpanded = true;\n            this.isCollapsed = false;\n            this.display = 'block';\n            // this.height = 'auto';\n            this.isCollapse = true;\n            this.isCollapsing = false;\n            this._renderer.setStyle(this._el.nativeElement, 'overflow', 'visible');\n            this._renderer.setStyle(this._el.nativeElement, 'height', 'auto');\n            this.expanded.emit(this);\n        };\n    return CollapseDirective;\n}());\nexport { CollapseDirective };\n//# sourceMappingURL=collapse.directive.js.map\n",null]}