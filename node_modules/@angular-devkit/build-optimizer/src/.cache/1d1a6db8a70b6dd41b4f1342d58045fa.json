{"remainingRequest":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Git Projects\\Standar Portal\\node_modules\\smartadmin-plugins\\smartwidgets\\jarvis.widget.ng2.js","dependencies":[{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\smartadmin-plugins\\smartwidgets\\jarvis.widget.ng2.js","mtime":499162500000},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624878985141},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/*         ______________________________________\r\n  ________|                                      |_______\r\n  \\       |             JarvisWidget             |      /\r\n   \\      |      Copyright Â© 2014 MyOrange       |     /\r\n   /      |______________________________________|     \\\r\n  /__________)                                (_________\\\r\n\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n * =======================================================================\r\n * JarvisWidget is FULLY owned and LICENSED by MYORANGE INC.\r\n * This script may NOT be RESOLD or REDISTRUBUTED on its own under any\r\n * circumstances, and is only to be used with this purchased\r\n * copy of SmartAdmin Template.\r\n * =======================================================================\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n * =======================================================================\r\n * original filename: jarvis.widget.js\r\n * filesize: 56.7 KB (58,158 bytes)\r\n * author: Sunny (@bootstraphunt)\r\n * email: info@myorange.ca\r\n */\r\n\r\n(function ($, window, document, undefined) {\r\n\r\n    //\"use strict\"; \r\n\r\n    var pluginName = 'jarvisWidgets';\r\n\r\n\t/**\r\n\t * Check for touch support and set right click events.\r\n\t **/\r\n\tvar clickEvent = (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch ? \r\n\t\t'touchstart' : 'click') + '.' + pluginName;\r\n\r\n    function Plugin(element, options) {\r\n        /**\r\n         * Variables.\r\n         **/\r\n        this.obj = $(element);\r\n        this.o = $.extend({}, $.fn[pluginName].defaults, options);\r\n        this.objId = this.obj.attr('id');\r\n        this.pwCtrls = '.jarviswidget-ctrls';\r\n        this.widget = this.obj.find(this.o.widgets);\r\n        this.toggleClass = this.o.toggleClass.split('|');\r\n        this.editClass = this.o.editClass.split('|');\r\n        this.fullscreenClass = this.o.fullscreenClass.split('|');\r\n        this.customClass = this.o.customClass.split('|');\r\n\t\tthis.storage = {enabled: this.o.localStorage};\r\n\t\tthis.initialized = false;\r\n\r\n        this.init();\r\n    }\r\n\r\n    Plugin.prototype = {\r\n\r\n        /**\r\n         * Function for the indicator image.\r\n         *\r\n         * @param:\r\n         **/\r\n        _runLoaderWidget: function (elm) {\r\n            var self = this;\r\n            if (self.o.indicator === true) {\r\n                elm.parents(self.o.widgets)\r\n                    .find('.jarviswidget-loader:first')\r\n                    .stop(true, true)\r\n                    .fadeIn(100)\r\n                    .delay(self.o.indicatorTime)\r\n                    .fadeOut(100);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create a fixed timestamp.\r\n         *\r\n         * @param: t | date | Current date.\r\n         **/\r\n        _getPastTimestamp: function (t) {\r\n\r\n            var self = this;\r\n\r\n            var da = new Date(t);\r\n            \r\n\r\n            /**\r\n             * Get and set the date and time.\r\n             **/\r\n            var tsMonth = da.getMonth() + 1;\r\n            // index based\r\n            var tsDay = da.getDate();\r\n            var tsYear = da.getFullYear();\r\n            var tsHours = da.getHours();\r\n            var tsMinutes = da.getMinutes();\r\n            var tsSeconds = da.getUTCSeconds();\r\n\r\n            /**\r\n             * Checking for one digit values, if so add an zero.\r\n             **/\r\n            if (tsMonth < 10) {\r\n                tsMonth = '0' + tsMonth;\r\n            }\r\n            if (tsDay < 10) {\r\n                tsDay = '0' + tsDay;\r\n            }\r\n            if (tsHours < 10) {\r\n                tsHours = '0' + tsHours;\r\n            }\r\n            if (tsMinutes < 10) {\r\n                tsMinutes = '0' + tsMinutes;\r\n            }\r\n            if (tsSeconds < 10) {\r\n                tsSeconds = '0' + tsSeconds;\r\n            }\r\n\r\n            /**\r\n             * The output, how you want it.\r\n             **/\r\n            var format = self.o.timestampFormat.replace(/%d%/g, tsDay)\r\n                .replace(/%m%/g, tsMonth)\r\n                .replace(/%y%/g, tsYear)\r\n                .replace(/%h%/g, tsHours)\r\n                .replace(/%i%/g, tsMinutes)\r\n                .replace(/%s%/g, tsSeconds);\r\n\r\n            return format;\r\n        },\r\n\r\n        /**\r\n         * AJAX load File, which get and shows the .\r\n         *\r\n         * @param: awidget | object  | The widget.\r\n         * @param: file    | file    | The file thats beeing loaded.\r\n         * @param: loader  | object  | The widget.\r\n         **/\r\n        _loadAjaxFile: function (awidget, file, loader) {\r\n\r\n            var self = this;\r\n\r\n            awidget.find('.widget-body')\r\n                .load(file, function (response, status, xhr) {\r\n\r\n                    var $this = $(this);\r\n\r\n                    /**\r\n                     * If action runs into an error display an error msg.\r\n                     **/\r\n                    if (status == \"error\") {\r\n                        $this.html('<h4 class=\"alert alert-danger\">' + self.o.labelError + '<b> ' +\r\n                            xhr.status + \" \" + xhr.statusText + '</b></h4>');\r\n                    }\r\n\r\n                    /**\r\n                     * Run if there are no errors.\r\n                     **/\r\n                    if (status == \"success\") {\r\n\r\n                        /**\r\n                         * Show a timestamp.\r\n                         **/\r\n                        var aPalceholder = awidget.find(self.o.timestampPlaceholder);\r\n\r\n                        if (aPalceholder.length) {\r\n\r\n                            aPalceholder.html(self._getPastTimestamp(new Date()));\r\n                        }\r\n\r\n                        /**\r\n                         * Run the callback function.\r\n                         **/\r\n                        if (typeof self.o.afterLoad == 'function') {\r\n                            self.o.afterLoad.call(this, awidget);\r\n                        }\r\n                    }\r\n\r\n\t\t\t\t\tself = null;\r\n                });\r\n\r\n            /**\r\n             * Run function for the indicator image.\r\n             **/\r\n            this._runLoaderWidget(loader);\r\n\r\n        },\r\n\r\n\t\t_loadKeys : function () {\r\n\t\t\t\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t//*****************************************************************//\r\n            /////////////////////////// SET/GET KEYS ////////////////////////////\r\n            //*****************************************************************//\r\n\r\n            // TODO : Push state does not work on IE9, try to find a way to detect IE and use a seperate filter\r\n\r\n\t\t\tif (self.o.ajaxnav === true) {\r\n\t\t\t\tvar widget_url = location.hash.replace(/^#/, '');\r\n\t\t\t\tself.storage.keySettings = 'Plugin_settings_' + widget_url + '_' + self.objId;\r\n\t\t\t\tself.storage.keyPosition = 'Plugin_position_' + widget_url + '_' + self.objId;\r\n\t\t\t} else if (self.initialized === false) {\r\n\t\t\t\tvar widget_url = self.o.pageKey || location.pathname;\r\n\t\t\t\tself.storage.keySettings = 'jarvisWidgets_settings_' + widget_url + '_' + self.objId;\r\n\t\t\t\tself.storage.keyPosition = 'jarvisWidgets_position_' + widget_url + '_' + self.objId;\r\n\t\t\t}\r\n\r\n\t\t},\r\n \r\n        /**\r\n         * Save all settings to the localStorage.\r\n         *\r\n         * @param:\r\n         **/\r\n        _saveSettingsWidget: function () {\r\n\r\n            var self = this;\r\n\t\t\tvar storage = self.storage;\r\n\r\n\t\t\tself._loadKeys();\r\n\r\n\t\t\tvar storeSettings = self.obj.find(self.o.widgets)\r\n\t\t\t\t.map(function () {\r\n\t\t\t\t\tvar storeSettingsStr = {};\r\n\t\t\t\t\tstoreSettingsStr.id = $(this)\r\n\t\t\t\t\t\t.attr('id');\r\n\t\t\t\t\tstoreSettingsStr.style = $(this)\r\n\t\t\t\t\t\t.attr('data-widget-attstyle');\r\n\t\t\t\t\tstoreSettingsStr.title = $(this)\r\n\t\t\t\t\t\t.children('header')\r\n\t\t\t\t\t\t.children('h2')\r\n\t\t\t\t\t\t.text();\r\n\t\t\t\t\tstoreSettingsStr.hidden = ($(this)\r\n\t\t\t\t\t\t.css('display') == 'none' ? 1 : 0);\r\n\t\t\t\t\tstoreSettingsStr.collapsed = ($(this)\r\n\t\t\t\t\t\t.hasClass('jarviswidget-collapsed') ? 1 : 0);\r\n\t\t\t\t\treturn storeSettingsStr;\r\n\t\t\t\t}).get();\r\n\r\n\t\t\tvar storeSettingsObj = JSON.stringify({\r\n\t\t\t\t'widget': storeSettings\r\n\t\t\t});\r\n\r\n\t\t\t/* Place it in the storage(only if needed) */\r\n\t\t\tif (storage.enabled && storage.getKeySettings != storeSettingsObj) {\r\n\t\t\t\tlocalStorage.setItem(storage.keySettings, storeSettingsObj);\r\n\t\t\t\tstorage.getKeySettings = storeSettingsObj;\r\n\t\t\t}\r\n\r\n            /**\r\n             * Run the callback function.\r\n             **/\r\n            \r\n            if (typeof self.o.onSave == 'function') {\r\n                self.o.onSave.call(this, null, storeSettingsObj, storage.keySettings);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save positions to the localStorage.\r\n         *\r\n         * @param:\r\n         **/\r\n        _savePositionWidget: function () {\r\n\r\n            var self = this;\r\n\t\t\tvar storage = self.storage;\r\n\r\n\t\t\tself._loadKeys();\r\n\r\n\t\t\tvar mainArr = self.obj.find(self.o.grid + '.sortable-grid')\r\n\t\t\t\t.map(function () {\r\n\t\t\t\t\tvar subArr = $(this)\r\n\t\t\t\t\t\t.find(self.o.widgets)\r\n\t\t\t\t\t\t.map(function () {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t'id': $(this).attr('id')\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}).get();\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t'section': subArr\r\n\t\t\t\t\t};\r\n\t\t\t\t}).get();\r\n\r\n\t\t\tvar storePositionObj = JSON.stringify({\r\n\t\t\t\t'grid': mainArr\r\n\t\t\t});\r\n\r\n\t\t\t/* Place it in the storage(only if needed) */\r\n\t\t\tif (storage.enabled && storage.getKeyPosition != storePositionObj) {\r\n\t\t\t\tlocalStorage.setItem(storage.keyPosition, storePositionObj);\r\n\t\t\t\tstorage.getKeyPosition = storePositionObj\r\n\t\t\t}\r\n\r\n            /**\r\n             * Run the callback function.\r\n             **/\r\n            if (typeof self.o.onSave == 'function') {\r\n                self.o.onSave.call(this, storePositionObj, storage.keyPosition);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Code that we run at the start.\r\n         *\r\n         * @param:\r\n         **/\r\n        init: function () {\r\n\r\n            var self = this;\r\n\t\t\t\r\n\t\t\tif (self.initialized) return;\r\n\r\n            self._initStorage(self.storage);\r\n\r\n            /**\r\n             * Force users to use an id(it's needed for the local storage).\r\n             **/\r\n            if (!$('#' + self.objId)\r\n                .length) {\r\n                alert('It looks like your using a class instead of an ID, dont do that!');\r\n            }\r\n\r\n            /**\r\n             * Add RTL support.\r\n             **/\r\n            if (self.o.rtl === true) {\r\n                $('body')\r\n                    .addClass('rtl');\r\n            }\r\n\r\n            /**\r\n             * This will add an extra class that we use to store the\r\n             * widgets in the right order.(savety)\r\n             **/\r\n\r\n            $(self.o.grid)\r\n                .each(function () {\r\n                    if ($(this)\r\n                        .find(self.o.widgets)\r\n                        .length) {\r\n                        $(this)\r\n                            .addClass('sortable-grid');\r\n                    }\r\n                });\r\n\r\n            //*****************************************************************//\r\n            //////////////////////// SET POSITION WIDGET ////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Run if data is present.\r\n             **/\r\n            if (self.storage.enabled && self.storage.getKeyPosition) {\r\n\r\n                var jsonPosition = JSON.parse(self.storage.getKeyPosition);\r\n\r\n                /**\r\n                 * Loop the data, and put every widget on the right place.\r\n                 **/\r\n                for (var key in jsonPosition.grid) {\r\n                    var changeOrder = self.obj.find(self.o.grid + '.sortable-grid')\r\n                        .eq(key);\r\n                    for (var key2 in jsonPosition.grid[key].section) {\r\n                        changeOrder.append($('#' + jsonPosition.grid[key].section[key2].id));\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            //*****************************************************************//\r\n            /////////////////////// SET SETTINGS WIDGET /////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Run if data is present.\r\n             **/\r\n            if (self.storage.enabled && self.storage.getKeySettings) {\r\n\r\n                var jsonSettings = JSON.parse(self.storage.getKeySettings);\r\n\r\n                /**\r\n                 * Loop the data and hide/show the widgets and set the inputs in\r\n                 * panel to checked(if hidden) and add an indicator class to the div.\r\n                 * Loop all labels and update the widget titles.\r\n                 **/\r\n                for (var key in jsonSettings.widget) {\r\n                    var widgetId = $('#' + jsonSettings.widget[key].id);\r\n\r\n                    /**\r\n                     * Set a style(if present).\r\n                     **/\r\n                    if (jsonSettings.widget[key].style) {\r\n                        //console.log(\"test\");\r\n                        widgetId.removeClassPrefix('jarviswidget-color-')\r\n                            .addClass(jsonSettings.widget[key].style)\r\n                            .attr('data-widget-attstyle', '' + jsonSettings.widget[key].style + '');\r\n                    }\r\n\r\n                    /**\r\n                     * Hide/show widget.\r\n                     **/\r\n                    if (jsonSettings.widget[key].hidden == 1) {\r\n                        widgetId.hide(1);\r\n                    } else {\r\n                        widgetId.show(1)\r\n                            .removeAttr('data-widget-hidden');\r\n                    }\r\n\r\n                    /**\r\n                     * Toggle content widget.\r\n                     **/\r\n                    if (jsonSettings.widget[key].collapsed == 1) {\r\n                        widgetId.addClass('jarviswidget-collapsed')\r\n                            .children('div')\r\n                            .hide(1);\r\n                    }\r\n\r\n                    /**\r\n                     * Update title widget (if needed).\r\n                     **/\r\n                    if (widgetId.children('header')\r\n                        .children('h2')\r\n                        .text() != jsonSettings.widget[key].title) {\r\n                        widgetId.children('header')\r\n                            .children('h2')\r\n                            .text(jsonSettings.widget[key].title);\r\n                    }\r\n                }\r\n            }\r\n\r\n            //*****************************************************************//\r\n            ////////////////////////// LOOP AL WIDGETS //////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * This will add/edit/remove the settings to all widgets\r\n             **/\r\n            self.widget.each(function () {\r\n\r\n                var tWidget = $(this),\r\n                \tthisHeader = $(this).children('header'),\r\n                \tcustomBtn,\r\n                \tdeleteBtn,  \r\n                \teditBtn,  \r\n                \tfullscreenBtn,\r\n                \twidgetcolorBtn,\r\n                \ttoggleBtn,\r\n                \ttoggleSettings,\r\n                  \trefreshBtn;\r\n\r\n                /**\r\n                 * Dont double wrap(check).\r\n                 **/\r\n                if (!thisHeader.parent()\r\n                    .attr('role')) {\r\n\r\n                    /**\r\n                     * Hide the widget if the dataset 'widget-hidden' is set to true.\r\n                     **/\r\n                    if (tWidget.data('widget-hidden') === true) {\r\n\r\n                        tWidget.hide();\r\n                    }\r\n\r\n                    /**\r\n\t\t\t\t\t * Hide the content of the widget if the dataset\r\n\t\t\t\t\t * 'widget-collapsed' is set to true.\r\n\r\n\t\t\t\t\t **/\r\n                    if (tWidget.data('widget-collapsed') === true) {\r\n                        tWidget.addClass('jarviswidget-collapsed')\r\n                            .children('div')\r\n                            .hide();\r\n                    }\r\n\r\n                    /**\r\n                     * Check for the dataset 'widget-icon' if so get the icon\r\n                     * and attach it to the widget header.\r\n                     * NOTE: MOVED THIS TO PHYSICAL for more control\r\n                     **/\r\n                    //if(tWidget.data('widget-icon')){\r\n                    //\tthisHeader.prepend('<i class=\"jarviswidget-icon '+tWidget.data('widget-icon')+'\"></i>');\r\n                    //}\r\n\r\n                    /**\r\n                     * Add a delete button to the widget header (if set to true).\r\n                     **/\r\n                    if (self.o.customButton === true && tWidget.data('widget-custombutton') ===\r\n                        undefined && self.customClass[0].length !== 0) {\r\n                        customBtn =\r\n                            '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-custom-btn\"><i class=\"' +\r\n                            self.customClass[0] + '\"></i></a>';\r\n                    } else {\r\n                        customBtn = '';\r\n                    }\r\n\r\n                    /**\r\n                     * Add a delete button to the widget header (if set to true).\r\n                     **/\r\n                    if (self.o.deleteButton === true && tWidget.data('widget-deletebutton') ===\r\n                        undefined) {\r\n                        deleteBtn =\r\n                            '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-delete-btn\" rel=\"tooltip\" title=\"Delete\" data-placement=\"bottom\"><i class=\"' +\r\n                            self.o.deleteClass + '\"></i></a>';\r\n                    } else {\r\n                        deleteBtn = '';\r\n                    }\r\n\r\n                    /**\r\n                     * Add a delete button to the widget header (if set to true).\r\n                     **/\r\n                    if (self.o.editButton === true && tWidget.data('widget-editbutton') === undefined) {\r\n                        editBtn =\r\n                            '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-edit-btn\" rel=\"tooltip\" title=\"Edit\" data-placement=\"bottom\"><i class=\"' +\r\n                            self.editClass[0] + '\"></i></a>';\r\n                    } else {\r\n                        editBtn = '';\r\n                    }\r\n\r\n                    /**\r\n                     * Add a delete button to the widget header (if set to true).\r\n                     **/\r\n                    if (self.o.fullscreenButton === true && tWidget.data('widget-fullscreenbutton') ===\r\n                        undefined) {\r\n                        fullscreenBtn =\r\n                            '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-fullscreen-btn\" rel=\"tooltip\" title=\"Fullscreen\" data-placement=\"bottom\"><i class=\"' +\r\n                            self.fullscreenClass[0] + '\"></i></a>';\r\n                    } else {\r\n                        fullscreenBtn = '';\r\n                    }\r\n\r\n                    /**\r\n                     * Add a delete button to the widget header (if set to true).\r\n                     **/\r\n                    if (self.o.colorButton === true && tWidget.data('widget-colorbutton') ===\r\n                        undefined) {\r\n                        widgetcolorBtn =\r\n                            '<a data-toggle=\"dropdown\" class=\"dropdown-toggle color-box selector\" href=\"javascript:void(0);\"></a><ul class=\"dropdown-menu arrow-box-up-right color-select pull-right\"><li><span class=\"bg-color-green\" data-widget-setstyle=\"jarviswidget-color-green\" rel=\"tooltip\" data-placement=\"left\" data-original-title=\"Green Grass\"></span></li><li><span class=\"bg-color-greenDark\" data-widget-setstyle=\"jarviswidget-color-greenDark\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Dark Green\"></span></li><li><span class=\"bg-color-greenLight\" data-widget-setstyle=\"jarviswidget-color-greenLight\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Light Green\"></span></li><li><span class=\"bg-color-purple\" data-widget-setstyle=\"jarviswidget-color-purple\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Purple\"></span></li><li><span class=\"bg-color-magenta\" data-widget-setstyle=\"jarviswidget-color-magenta\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Magenta\"></span></li><li><span class=\"bg-color-pink\" data-widget-setstyle=\"jarviswidget-color-pink\" rel=\"tooltip\" data-placement=\"right\" data-original-title=\"Pink\"></span></li><li><span class=\"bg-color-pinkDark\" data-widget-setstyle=\"jarviswidget-color-pinkDark\" rel=\"tooltip\" data-placement=\"left\" data-original-title=\"Fade Pink\"></span></li><li><span class=\"bg-color-blueLight\" data-widget-setstyle=\"jarviswidget-color-blueLight\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Light Blue\"></span></li><li><span class=\"bg-color-teal\" data-widget-setstyle=\"jarviswidget-color-teal\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Teal\"></span></li><li><span class=\"bg-color-blue\" data-widget-setstyle=\"jarviswidget-color-blue\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Ocean Blue\"></span></li><li><span class=\"bg-color-blueDark\" data-widget-setstyle=\"jarviswidget-color-blueDark\" rel=\"tooltip\" data-placement=\"top\" data-original-title=\"Night Sky\"></span></li><li><span class=\"bg-color-darken\" data-widget-setstyle=\"jarviswidget-color-darken\" rel=\"tooltip\" data-placement=\"right\" data-original-title=\"Night\"></span></li><li><span class=\"bg-color-yellow\" data-widget-setstyle=\"jarviswidget-color-yellow\" rel=\"tooltip\" data-placement=\"left\" data-original-title=\"Day Light\"></span></li><li><span class=\"bg-color-orange\" data-widget-setstyle=\"jarviswidget-color-orange\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Orange\"></span></li><li><span class=\"bg-color-orangeDark\" data-widget-setstyle=\"jarviswidget-color-orangeDark\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Dark Orange\"></span></li><li><span class=\"bg-color-red\" data-widget-setstyle=\"jarviswidget-color-red\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Red Rose\"></span></li><li><span class=\"bg-color-redLight\" data-widget-setstyle=\"jarviswidget-color-redLight\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Light Red\"></span></li><li><span class=\"bg-color-white\" data-widget-setstyle=\"jarviswidget-color-white\" rel=\"tooltip\" data-placement=\"right\" data-original-title=\"Purity\"></span></li><li><a href=\"javascript:void(0);\" class=\"jarviswidget-remove-colors\" data-widget-setstyle=\"\" rel=\"tooltip\" data-placement=\"bottom\" data-original-title=\"Reset widget color to default\">Remove</a></li></ul>';\r\n                        thisHeader.prepend('<div class=\"widget-toolbar\">' + widgetcolorBtn + '</div>');\r\n\r\n                    } else {\r\n                        widgetcolorBtn = '';\r\n                    }\r\n\r\n                    /**\r\n                     * Add a toggle button to the widget header (if set to true).\r\n                     **/\r\n                    if (self.o.toggleButton === true && tWidget.data('widget-togglebutton') ===\r\n                        undefined) {\r\n                        if (tWidget.data('widget-collapsed') === true || tWidget.hasClass(\r\n                            'jarviswidget-collapsed')) {\r\n                            toggleSettings = self.toggleClass[1];\r\n                        } else {\r\n                            toggleSettings = self.toggleClass[0];\r\n                        }\r\n                        toggleBtn =\r\n                            '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-toggle-btn\" rel=\"tooltip\" title=\"Collapse\" data-placement=\"bottom\"><i class=\"' +\r\n                            toggleSettings + '\"></i></a>';\r\n                    } else {\r\n                        toggleBtn = '';\r\n                    }\r\n\r\n                    /**\r\n                     * Add a refresh button to the widget header (if set to true).\r\n                     **/\r\n                    if (self.o.refreshButton === true && tWidget.data('widget-refreshbutton') !==\r\n                        false && tWidget.data('widget-load')) {\r\n                        refreshBtn =\r\n                            '<a href=\"javascript:void(0);\" class=\"button-icon jarviswidget-refresh-btn\" data-loading-text=\"&nbsp;&nbsp;Loading...&nbsp;\" rel=\"tooltip\" title=\"Refresh\" data-placement=\"bottom\"><i class=\"' +\r\n                            self.o.refreshButtonClass + '\"></i></a>';\r\n                    } else {\r\n                        refreshBtn = '';\r\n                    }\r\n\r\n                    /**\r\n                     * Set the buttons order.\r\n                     **/\r\n                    var formatButtons = self.o.buttonOrder.replace(/%refresh%/g, refreshBtn)\r\n                        .replace(/%delete%/g, deleteBtn)\r\n                        .replace(/%custom%/g, customBtn)\r\n                        .replace(/%fullscreen%/g, fullscreenBtn)\r\n                        .replace(/%edit%/g, editBtn)\r\n                        .replace(/%toggle%/g, toggleBtn);\r\n\r\n                    /**\r\n                     * Add a button wrapper to the header.\r\n                     **/\r\n                    if (refreshBtn !== '' || deleteBtn !== '' || customBtn !== '' || fullscreenBtn !== '' ||\r\n                        editBtn !== '' || toggleBtn !== '') {\r\n                        thisHeader.prepend('<div class=\"jarviswidget-ctrls\">' + formatButtons +\r\n                            '</div>');\r\n                    }\r\n\r\n                    /**\r\n                     * Adding a helper class to all sortable widgets, this will be\r\n                     * used to find the widgets that are sortable, it will skip the widgets\r\n                     * that have the dataset 'widget-sortable=\"false\"' set to false.\r\n                     **/\r\n                    if (self.o.sortable === true && tWidget.data('widget-sortable') === undefined) {\r\n                        tWidget.addClass('jarviswidget-sortable');\r\n                    }\r\n\r\n                    /**\r\n                     * If the edit box is present copy the title to the input.\r\n                     **/\r\n                    if (tWidget.find(self.o.editPlaceholder)\r\n                        .length) {\r\n                        tWidget.find(self.o.editPlaceholder)\r\n                            .find('input')\r\n                            .val($.trim(thisHeader.children('h2')\r\n                                .text()));\r\n                    }\r\n\r\n                    /**\r\n                     * Prepend the image to the widget header.\r\n                     **/\r\n                    thisHeader.append(\r\n                        '<span class=\"jarviswidget-loader\"><i class=\"fa fa-refresh fa-spin\"></i></span>'\r\n                    );\r\n\r\n                    /**\r\n                     * Adding roles to some parts.\r\n                     **/\r\n                    tWidget.attr('role', 'widget')\r\n                        .children('div')\r\n                        .attr('role', 'content')\r\n                        .prev('header')\r\n                        .attr('role', 'heading')\r\n                        .children('div')\r\n                        .attr('role', 'menu');\r\n                }\r\n            });\r\n\r\n            /**\r\n             * Hide all buttons if option is set to true.\r\n             **/\r\n            if (self.o.buttonsHidden === true) {\r\n                $(self.o.pwCtrls)\r\n                    .hide();\r\n            }\r\n\r\n            /* activate all tooltips */\r\n            // $(\".jarviswidget header [rel=tooltip]\")\r\n            //     .tooltip();\r\n\r\n            //******************************************************************//\r\n            //////////////////////////////// AJAX ////////////////////////////////\r\n            //******************************************************************//\r\n\r\n            /**\r\n             * Loop all ajax widgets.\r\n             **/\r\n            // $.intervalArr = new Array(); - decleared in app.js\r\n            self.obj.find('[data-widget-load]')\r\n                .each(function () {\r\n\r\n                    /**\r\n                     * Variables.\r\n                     **/\r\n                    var thisItem = $(this),\r\n                        thisItemHeader = thisItem.children(),\r\n                        pathToFile = thisItem.data('widget-load'),\r\n                        reloadTime = thisItem.data('widget-refresh') * 1000,\r\n                        ajaxLoader = thisItem.children();\r\n\r\n                    if (!thisItem.find('.jarviswidget-ajax-placeholder')\r\n                        .length) {\r\n\r\n                        /**\r\n                         * Append a AJAX placeholder.\r\n                         **/\r\n                        thisItem.children('widget-body')\r\n                            .append('<div class=\"jarviswidget-ajax-placeholder\">' + self.o.loadingLabel +\r\n                                '</div>');\r\n\r\n                        /**\r\n                         * If widget has a reload time refresh the widget, if the value\r\n                         * has been set to 0 dont reload.\r\n                         **/\r\n                        if (thisItem.data('widget-refresh') > 0) {\r\n\r\n                            /**\r\n                             * Load file on start.\r\n                             **/\r\n                            self._loadAjaxFile(thisItem, pathToFile, thisItemHeader);\r\n\r\n                            /**\r\n                             * Set an interval to reload the content every XXX seconds.\r\n                             * intervalArr.push(setInterval(intervalOne, 2000)  );\r\n                             **/\r\n                            $.intervalArr.push( setInterval(function () {self._loadAjaxFile(thisItem, pathToFile, thisItemHeader)}, reloadTime) );\r\n                            \r\n                        } else {\r\n\r\n                            /**\r\n                             * Load the content just once.\r\n                             **/\r\n                            self._loadAjaxFile(thisItem, pathToFile, thisItemHeader);\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n            //******************************************************************//\r\n            ////////////////////////////// SORTABLE //////////////////////////////\r\n            //******************************************************************//\r\n\r\n            /**\r\n             * jQuery UI soratble, this allows users to sort the widgets.\r\n             * Notice that this part needs the jquery-ui core to work.\r\n             **/\r\n            if (self.o.sortable === true && jQuery.ui) {\r\n                var sortItem = self.obj.find(self.o.grid + '.sortable-grid')\r\n                    .not('[data-widget-excludegrid]');\r\n                sortItem.sortable({\r\n                    items: sortItem.find(self.o.widgets + '.jarviswidget-sortable'),\r\n                    connectWith: sortItem,\r\n                    placeholder: self.o.placeholderClass,\r\n                    cursor: 'move',\r\n                    revert: true,\r\n                    opacity: self.o.opacity,\r\n                    delay: 200,\r\n                    cancel: '.button-icon, #jarviswidget-fullscreen-mode > div',\r\n                    zIndex: 10000,\r\n                    handle: self.o.dragHandle,\r\n                    forcePlaceholderSize: true,\r\n                    forceHelperSize: true,\r\n                    update: function (event, ui) {\r\n                        /* run pre-loader in the widget */\r\n                        self._runLoaderWidget(ui.item.children());\r\n                        /* store the positions of the plugins */\r\n                        self._savePositionWidget();\r\n                        /**\r\n                         * Run the callback function.\r\n                         **/\r\n                        if (typeof self.o.onChange == 'function') {\r\n                            self.o.onChange.call(this, ui.item);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            //*****************************************************************//\r\n            ////////////////////////// BUTTONS VISIBLE //////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Show and hide the widget control buttons, the buttons will be\r\n             * visible if the users hover over the widgets header. At default the\r\n             * buttons are always visible.\r\n             **/\r\n            if (self.o.buttonsHidden === true) {\r\n\r\n                /**\r\n                 * Show and hide the buttons.\r\n                 **/\r\n                self.widget.children('header')\r\n                    .on('mouseenter.' + pluginName, function () {\r\n                        $(this)\r\n                            .children(self.o.pwCtrls)\r\n                            .stop(true, true)\r\n                            .fadeTo(100, 1.0);\r\n                    })\r\n\t\t\t\t\t.on('mouseleave.' + pluginName, function () {\r\n                        $(this)\r\n                            .children(self.o.pwCtrls)\r\n                            .stop(true, true)\r\n                            .fadeTo(100, 0.0);\r\n                    });\r\n            }\r\n\r\n            //*****************************************************************//\r\n            ///////////////////////// CLICKEVENTS //////////////////////////\r\n            //*****************************************************************//\r\n\r\n            self._clickEvents();\r\n\r\n            //*****************************************************************//\r\n            ///////////////////// DELETE LOCAL STORAGE KEYS /////////////////////\r\n            //*****************************************************************//\r\n\r\n\t\t\tif (self.storage.enabled) {\r\n\t\t\t\t/**\r\n\t\t\t\t * Delete the settings key.\r\n\t\t\t\t **/\r\n\t\t\t\t$(self.o.deleteSettingsKey)\r\n\t\t\t\t\t.on(clickEvent, this, function (e) {\r\n                        var cleared = confirm(self.o.settingsKeyLabel);\r\n                        if (cleared) {\r\n                            localStorage.removeItem(keySettings);\r\n                        }\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t});\r\n\t\t\t\t/**\r\n\t\t\t\t * Delete the position key.\r\n\t\t\t\t **/\r\n\t\t\t\t$(self.o.deletePositionKey)\r\n\t\t\t\t\t.on(clickEvent, this, function (e) {\r\n                        var cleared = confirm(self.o.positionKeyLabel);\r\n                        if (cleared) {\r\n                            localStorage.removeItem(keyPosition);\r\n                        }\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tinitialized = true;\r\n        },\r\n\r\n        /**\r\n         * Initialize storage.\r\n         *\r\n         * @param:\r\n         **/\r\n        _initStorage: function (storage) {\r\n\r\n            //*****************************************************************//\r\n            //////////////////////// LOCALSTORAGE CHECK /////////////////////////\r\n            //*****************************************************************//\r\n\r\n            storage.enabled = storage.enabled && !! function () {\r\n                var result, uid = +new Date();\r\n                try {\r\n                    localStorage.setItem(uid, uid);\r\n                    result = localStorage.getItem(uid) == uid;\r\n                    localStorage.removeItem(uid);\r\n                    return result;\r\n                } catch (e) {}\r\n            }();\r\n\r\n\t\t\tthis._loadKeys();\r\n\r\n            if (storage.enabled) {\r\n\r\n\t\t\t\tstorage.getKeySettings = localStorage.getItem(storage.keySettings);\r\n\t\t\t\tstorage.getKeyPosition = localStorage.getItem(storage.keyPosition);\r\n\t\t\t\t\r\n            } // end if\r\n\r\n        },\r\n\r\n        /**\r\n         * All of the click events.\r\n         *\r\n         * @param:\r\n         **/\r\n        _clickEvents: function () {\r\n\r\n            var self = this;\r\n\r\n            var headers = self.widget.children('header');\r\n\r\n            //*****************************************************************//\r\n            /////////////////////////// TOGGLE WIDGETS //////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Allow users to toggle the content of the widgets.\r\n             **/\r\n            headers.on(clickEvent, '.jarviswidget-toggle-btn', function (e) {\r\n\r\n                var tWidget = $(this);\r\n                var pWidget = tWidget.parents(self.o.widgets);\r\n\r\n                /**\r\n                 * Run function for the indicator image.\r\n                 **/\r\n                self._runLoaderWidget(tWidget);\r\n\r\n                /**\r\n                 * Change the class and hide/show the widgets content.\r\n                 **/\r\n                if (pWidget.hasClass('jarviswidget-collapsed')) {\r\n                    tWidget.children()\r\n                        .removeClass(self.toggleClass[1])\r\n                        .addClass(self.toggleClass[0])\r\n                        .parents(self.o.widgets)\r\n                        .removeClass('jarviswidget-collapsed')\r\n                        .children('[role=content]')\r\n                        .slideDown(self.o.toggleSpeed, function () {\r\n                            self._saveSettingsWidget();\r\n                        });\r\n                } else {\r\n                    tWidget.children()\r\n                        .removeClass(self.toggleClass[0])\r\n                        .addClass(self.toggleClass[1])\r\n                        .parents(self.o.widgets)\r\n                        .addClass('jarviswidget-collapsed')\r\n                        .children('[role=content]')\r\n                        .slideUp(self.o.toggleSpeed, function () {\r\n                            self._saveSettingsWidget();\r\n                        });\r\n                }\r\n\r\n                /**\r\n                 * Run the callback function.\r\n                 **/\r\n                if (typeof self.o.onToggle == 'function') {\r\n                    self.o.onToggle.call(this, pWidget);\r\n                }\r\n\r\n                e.preventDefault();\r\n            });\r\n\r\n            //*****************************************************************//\r\n            ///////////////////////// FULLSCREEN WIDGETS ////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Set fullscreen height function.\r\n             **/\r\n            function heightFullscreen() {\r\n                if ($('#jarviswidget-fullscreen-mode')\r\n                    .length) {\r\n\r\n                    /**\r\n                     * Setting height variables.\r\n                     **/\r\n                    var heightWindow = $(window)\r\n                        .height();\r\n                    var heightHeader = $('#jarviswidget-fullscreen-mode')\r\n                        .children(self.o.widgets)\r\n                        .children('header')\r\n                        .height();\r\n\r\n                    /**\r\n                     * Setting the height to the right widget.\r\n                     **/\r\n                    $('#jarviswidget-fullscreen-mode')\r\n                        .children(self.o.widgets)\r\n                        .children('div')\r\n                        .height(heightWindow - heightHeader - 15);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * On click go to fullscreen mode.\r\n             **/\r\n            headers.on(clickEvent, '.jarviswidget-fullscreen-btn', function (e) {\r\n\r\n                var thisWidget = $(this)\r\n                    .parents(self.o.widgets);\r\n                var thisWidgetContent = thisWidget.children('div');\r\n\r\n                /**\r\n                 * Run function for the indicator image.\r\n                 **/\r\n                self._runLoaderWidget($(this));\r\n\r\n                /**\r\n                 * Wrap the widget and go fullsize.\r\n                 **/\r\n                if ($('#jarviswidget-fullscreen-mode')\r\n                    .length) {\r\n\r\n                    /**\r\n                     * Remove class from the body.\r\n                     **/\r\n                    $('.nooverflow')\r\n                        .removeClass('nooverflow');\r\n\r\n                    /**\r\n                     * Unwrap the widget, remove the height, set the right\r\n                     * fulscreen button back, and show all other buttons.\r\n                     **/\r\n                    thisWidget.unwrap('div')\r\n                        .children('div')\r\n                        .removeAttr('style')\r\n                        .end()\r\n                        .find('.jarviswidget-fullscreen-btn:first')\r\n                        .children()\r\n                        .removeClass(self.fullscreenClass[1])\r\n                        .addClass(self.fullscreenClass[0])\r\n                        .parents(self.pwCtrls)\r\n                        .children('a')\r\n                        .show();\r\n\r\n                    /**\r\n                     * Reset collapsed widgets.\r\n                     **/\r\n                    if (thisWidgetContent.hasClass('jarviswidget-visible')) {\r\n                        thisWidgetContent.hide()\r\n                            .removeClass('jarviswidget-visible');\r\n                    }\r\n\r\n                } else {\r\n\r\n                    /**\r\n                     * Prevent the body from scrolling.\r\n                     **/\r\n                    $('body')\r\n                        .addClass('nooverflow');\r\n\r\n                    /**\r\n\t\t\t\t\t * Wrap, append it to the body, show the right button\r\n\r\n\t\t\t\t\t * and hide all other buttons.\r\n\t\t\t\t\t **/\r\n                    thisWidget.wrap('<div id=\"jarviswidget-fullscreen-mode\"/>')\r\n                        .parent()\r\n                        .find('.jarviswidget-fullscreen-btn:first')\r\n                        .children()\r\n                        .removeClass(self.fullscreenClass[0])\r\n                        .addClass(self.fullscreenClass[1])\r\n                        .parents(self.pwCtrls)\r\n                        .children('a:not(.jarviswidget-fullscreen-btn)')\r\n                        .hide();\r\n\r\n                    /**\r\n                     * Show collapsed widgets.\r\n                     **/\r\n                    if (thisWidgetContent.is(':hidden')) {\r\n                        thisWidgetContent.show()\r\n                            .addClass('jarviswidget-visible');\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Run the set height function.\r\n                 **/\r\n                heightFullscreen();\r\n\r\n                /**\r\n                 * Run the callback function.\r\n                 **/\r\n                if (typeof self.o.onFullscreen == 'function') {\r\n                    self.o.onFullscreen.call(this, thisWidget);\r\n                }\r\n\r\n                e.preventDefault();\r\n            });\r\n\r\n            /**\r\n             * Run the set fullscreen height function when the screen resizes.\r\n             **/\r\n            $(window)\r\n                .on('resize.' + pluginName, function () {\r\n\r\n                    /**\r\n                     * Run the set height function.\r\n                     **/\r\n                    heightFullscreen();\r\n                });\r\n\r\n            //*****************************************************************//\r\n            //////////////////////////// EDIT WIDGETS ///////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Allow users to show/hide a edit box.\r\n             **/\r\n            headers.on(clickEvent, '.jarviswidget-edit-btn', function (e) {\r\n\r\n                var tWidget = $(this)\r\n                    .parents(self.o.widgets);\r\n\r\n                /**\r\n                 * Run function for the indicator image.\r\n                 **/\r\n                self._runLoaderWidget($(this));\r\n\r\n                /**\r\n                 * Show/hide the edit box.\r\n                 **/\r\n                if (tWidget.find(self.o.editPlaceholder)\r\n                    .is(':visible')) {\r\n                    $(this)\r\n                        .children()\r\n                        .removeClass(self.editClass[1])\r\n                        .addClass(self.editClass[0])\r\n                        .parents(self.o.widgets)\r\n                        .find(self.o.editPlaceholder)\r\n                        .slideUp(self.o.editSpeed, function () {\r\n                            self._saveSettingsWidget();\r\n                        });\r\n                } else {\r\n                    $(this)\r\n                        .children()\r\n                        .removeClass(self.editClass[0])\r\n                        .addClass(self.editClass[1])\r\n                        .parents(self.o.widgets)\r\n                        .find(self.o.editPlaceholder)\r\n                        .slideDown(self.o.editSpeed);\r\n                }\r\n\r\n                /**\r\n                 * Run the callback function.\r\n                 **/\r\n                if (typeof self.o.onEdit == 'function') {\r\n                    self.o.onEdit.call(this, tWidget);\r\n                }\r\n\r\n                e.preventDefault();\r\n            });\r\n\r\n            /**\r\n             * Update the widgets title by using the edit input.\r\n             **/\r\n            $(self.o.editPlaceholder)\r\n                .find('input')\r\n                .keyup(function () {\r\n                    $(this)\r\n                        .parents(self.o.widgets)\r\n                        .children('header')\r\n                        .children('h2')\r\n                        .text($(this)\r\n                            .val());\r\n                });\r\n\r\n            /**\r\n             * Set a custom style.\r\n             **/\r\n            headers.on(clickEvent, '[data-widget-setstyle]', function (e) {\r\n\r\n                var val = $(this)\r\n                    .data('widget-setstyle');\r\n                var styles = '';\r\n\r\n                /**\r\n                 * Get all other styles, in order to remove it.\r\n                 **/\r\n                $(this)\r\n                    .parents(self.o.editPlaceholder)\r\n                    .find('[data-widget-setstyle]')\r\n                    .each(function () {\r\n                        styles += $(this)\r\n                            .data('widget-setstyle') + ' ';\r\n                    });\r\n\r\n                /**\r\n                 * Set the new style.\r\n                 **/\r\n                $(this)\r\n                    .parents(self.o.widgets)\r\n                    .attr('data-widget-attstyle', '' + val + '')\r\n                    .removeClassPrefix('jarviswidget-color-')\r\n                    .addClass(val);\r\n\r\n                /**\r\n                 * Run function for the indicator image.\r\n                 **/\r\n                self._runLoaderWidget($(this));\r\n\r\n                /**\r\n                 * Lets save the setings.\r\n                 **/\r\n                self._saveSettingsWidget();\r\n\r\n                e.preventDefault();\r\n            });\r\n\r\n            //*****************************************************************//\r\n            /////////////////////////// CUSTOM ACTION ///////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Allow users to show/hide a edit box.\r\n             **/\r\n            headers.on(clickEvent, '.jarviswidget-custom-btn', function (e) {\r\n\r\n                var w = $(this)\r\n                    .parents(self.o.widgets);\r\n\r\n                /**\r\n                 * Run function for the indicator image.\r\n                 **/\r\n                self._runLoaderWidget($(this));\r\n\r\n                /**\r\n                 * Start and end custom action.\r\n                 **/\r\n                if ($(this)\r\n                    .children('.' + self.customClass[0])\r\n                    .length) {\r\n                    $(this)\r\n                        .children()\r\n                        .removeClass(self.customClass[0])\r\n                        .addClass(self.customClass[1]);\r\n\r\n                    /**\r\n                     * Run the callback function.\r\n                     **/\r\n                    if (typeof self.o.customStart == 'function') {\r\n                        self.o.customStart.call(this, w);\r\n                    }\r\n                } else {\r\n                    $(this)\r\n                        .children()\r\n                        .removeClass(self.customClass[1])\r\n                        .addClass(self.customClass[0]);\r\n\r\n                    /**\r\n                     * Run the callback function.\r\n                     **/\r\n                    if (typeof self.o.customEnd == 'function') {\r\n                        self.o.customEnd.call(this, w);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Lets save the setings.\r\n                 **/\r\n                self._saveSettingsWidget();\r\n\r\n                e.preventDefault();\r\n            });\r\n\r\n            //*****************************************************************//\r\n            /////////////////////////// DELETE WIDGETS //////////////////////////\r\n            //*****************************************************************//\r\n\r\n            /**\r\n             * Allow users to delete the widgets.\r\n             **/\r\n            headers.on(clickEvent, '.jarviswidget-delete-btn', function (e) {\r\n\r\n                var tWidget = $(this)\r\n                    .parents(self.o.widgets);\r\n                var removeId = tWidget.attr('id');\r\n                var widTitle = tWidget.children('header')\r\n                    .children('h2')\r\n                    .text();\r\n\r\n                /**\r\n                 * Delete the widgets with a confirm popup.\r\n                 **/\r\n                \r\n                if ($.SmartMessageBox) {\r\n   \r\n                   $.SmartMessageBox({\r\n\t                    title: \"<i class='fa fa-times' style='color:#ed1c24'></i> \" + self.o.labelDelete +\r\n\t                        ' \"' + widTitle + '\"',\r\n\t                    content: self.o.deleteMsg,\r\n\t                    buttons: '[No][Yes]'\r\n\t                }, function (ButtonPressed) {\r\n\t                    //console.log(ButtonPressed);\r\n\t                    if (ButtonPressed == \"Yes\") {\r\n\t                        /**\r\n\t                         * Run function for the indicator image.\r\n\t                         **/\r\n\t                        self._runLoaderWidget($(this));\r\n\t\r\n\t                        /**\r\n\t                         * Delete the right widget.\r\n\t                         **/\r\n\t                        $('#' + removeId)\r\n\t                            .fadeOut(self.o.deleteSpeed, function () {\r\n\t\r\n\t                                $(this)\r\n\t                                    .remove();\r\n\t\r\n\t                                /**\r\n\t                                 * Run the callback function.\r\n\t                                 **/\r\n\t                                if (typeof self.o.onDelete == 'function') {\r\n\t                                    self.o.onDelete.call(this, tWidget);\r\n\t                                }\r\n\t                            });\r\n\t                    }\r\n\t\r\n\t                });\r\n\t                \t\r\n                } else {\r\n                \t\r\n                \t/**\r\n                     * Delete the right widget.\r\n                     **/\r\n                    $('#' + removeId)\r\n                    .fadeOut(self.o.deleteSpeed, function () {\r\n\r\n                        $(this)\r\n                            .remove();\r\n\r\n                        /**\r\n                         * Run the callback function.\r\n                         **/\r\n                        if (typeof self.o.onDelete == 'function') {\r\n                            self.o.onDelete.call(this, tWidget);\r\n                        }\r\n                    });\r\n                \t\r\n                }\r\n\r\n                e.preventDefault();\r\n            });\r\n\r\n            //******************************************************************//\r\n            /////////////////////////// REFRESH BUTTON ///////////////////////////\r\n            //******************************************************************//\r\n\r\n            /**\r\n             * Refresh ajax upon clicking refresh link.\r\n             **/\r\n            headers.on(clickEvent, '.jarviswidget-refresh-btn', function (e) {\r\n\r\n                /**\r\n                 * Variables.\r\n                 **/\r\n                var rItem = $(this)\r\n                    .parents(self.o.widgets),\r\n                    pathToFile = rItem.data('widget-load'),\r\n                    ajaxLoader = rItem.children(),\r\n                    btn = $(this);\r\n\r\n                /**\r\n                 * Run the ajax function.\r\n                 **/\r\n                btn.button('loading');\r\n                ajaxLoader.addClass(\"widget-body-ajax-loading\");\r\n                setTimeout(function () {\r\n                    btn.button('reset');\r\n                    ajaxLoader.removeClass(\"widget-body-ajax-loading\");\r\n                    self._loadAjaxFile(rItem, pathToFile, ajaxLoader);\r\n\r\n                }, 1000);\r\n\r\n                e.preventDefault();\r\n            });\r\n\t\t\t\r\n\t\t\theaders = null;\r\n        },\r\n\r\n        /**\r\n         * Destroy.\r\n         *\r\n         * @param:\r\n         **/\r\n        destroy: function () {\r\n            var self = this, \r\n            namespace = '.' + pluginName, \r\n            sortItem = self.obj.find(self.o.grid + '.sortable-grid').not('[data-widget-excludegrid]');\r\n            \r\n            sortItem.sortable('destroy');\r\n            self.widget.children('header').off(namespace);\r\n\t\t\t$(self.o.deleteSettingsKey).off(namespace);\r\n\t\t\t$(self.o.deletePositionKey).off(namespace);\r\n\t\t\t$(window).off(namespace);\r\n            self.obj.removeData(pluginName);\r\n        }\r\n    };\r\n\r\n    $.fn[pluginName] = function (option) {\r\n        return this.each(function () {\r\n            var $this = $(this);\r\n            var data = $this.data(pluginName);\r\n            if (!data) {\r\n\t\t\t\tvar options = typeof option == 'object' && option;\r\n                $this.data(pluginName, (data = new Plugin(this, options)));\r\n            }\r\n            if (typeof option == 'string') {\r\n                data[option]();\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Default settings(dont change).\r\n     * You can globally override these options\r\n     * by using $.fn.pluginName.key = 'value';\r\n     **/\r\n\r\n    $.fn[pluginName].defaults = {\r\n        grid: 'section',\r\n        widgets: '.jarviswidget',\r\n        localStorage: true,\r\n        deleteSettingsKey: '',\r\n        settingsKeyLabel: 'Reset settings?',\r\n        deletePositionKey: '',\r\n        positionKeyLabel: 'Reset position?',\r\n        sortable: true,\r\n        buttonsHidden: false,\r\n        toggleButton: true,\r\n        toggleClass: 'min-10 | plus-10',\r\n        toggleSpeed: 200,\r\n        onToggle: function () {},\r\n        deleteButton: true,\r\n        deleteMsg:'Warning: This action cannot be undone',\r\n        deleteClass: 'trashcan-10',\r\n        deleteSpeed: 200,\r\n        onDelete: function () {},\r\n        editButton: true,\r\n        editPlaceholder: '.jarviswidget-editbox',\r\n        editClass: 'pencil-10 | delete-10',\r\n        editSpeed: 200,\r\n        onEdit: function () {},\r\n        colorButton: true,\r\n        fullscreenButton: true,\r\n        fullscreenClass: 'fullscreen-10 | normalscreen-10',\r\n        fullscreenDiff: 3,\r\n        onFullscreen: function () {},\r\n        customButton: true,\r\n        customClass: '',\r\n        customStart: function () {},\r\n        customEnd: function () {},\r\n        buttonOrder: '%refresh% %delete% %custom% %edit% %fullscreen% %toggle%',\r\n        opacity: 1.0,\r\n        dragHandle: '> header',\r\n        placeholderClass: 'jarviswidget-placeholder',\r\n        indicator: true,\r\n        indicatorTime: 600,\r\n        ajax: true,\r\n        loadingLabel: 'loading...',\r\n        timestampPlaceholder: '.jarviswidget-timestamp',\r\n        timestampFormat: 'Last update: %m%/%d%/%y% %h%:%i%:%s%',\r\n        refreshButton: true,\r\n        refreshButtonClass: 'refresh-10',\r\n        labelError: 'Sorry but there was a error:',\r\n        labelUpdated: 'Last Update:',\r\n        labelRefresh: 'Refresh',\r\n        labelDelete: 'Delete widget:',\r\n        afterLoad: function () {},\r\n        rtl: false,\r\n        onChange: function () {},\r\n        onSave: function () {},\r\n        ajaxnav: true\r\n    };\r\n\r\n    /*\r\n     * REMOVE CSS CLASS WITH PREFIX\r\n     * Description: Remove classes that have given prefix. You have an element with classes\r\n     * \t\t\t\t\"widget widget-color-red\"\r\n     * Usage: $elem.removeClassPrefix('widget-color-');\r\n     */\r\n\r\n    $.fn.removeClassPrefix = function (prefix) {\r\n\r\n        this.each(function (i, it) {\r\n            var classes = it.className.split(\" \")\r\n                .map(function (item) {\r\n                    return item.indexOf(prefix) === 0 ? \"\" : item;\r\n                });\r\n            //it.className = classes.join(\" \");\r\n            it.className = $.trim(classes.join(\" \"));\r\n\r\n        });\r\n\r\n        return this;\r\n    };\r\n})(jQuery, window, document);",null]}