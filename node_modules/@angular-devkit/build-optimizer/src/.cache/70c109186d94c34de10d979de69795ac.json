{"remainingRequest":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Git Projects\\Standar Portal\\node_modules\\@angular-redux\\store\\lib\\src\\decorators\\select.js","dependencies":[{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-redux\\store\\lib\\src\\decorators\\select.js","mtime":1527648735000},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1624878985141},{"path":"D:\\Git Projects\\Standar Portal\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"./helpers\");\n/**\n * Selects an observable from the store, and attaches it to the decorated\n * property.\n *\n * ```ts\n *  import { select } from '@angular-redux/store';\n *\n *  class SomeClass {\n *    @select(['foo','bar']) foo$: Observable<string>\n * }\n * ```\n *\n * @param selector\n * A selector function, property name string, or property name path\n * (array of strings/array indices) that locates the store data to be\n * selected\n *\n * @param comparator Function used to determine if this selector has changed.\n */\nfunction select(selector, comparator) {\n    return function (target, key) {\n        var adjustedSelector = selector\n            ? selector\n            : String(key).lastIndexOf('$') === String(key).length - 1\n                ? String(key).substring(0, String(key).length - 1)\n                : key;\n        decorate(adjustedSelector, undefined, comparator)(target, key);\n    };\n}\nexports.select = select;\n/**\n * Selects an observable using the given path selector, and runs it through the\n * given transformer function. A transformer function takes the store\n * observable as an input and returns a derived observable from it. That derived\n *  observable is run through distinctUntilChanges with the given optional\n * comparator and attached to the store property.\n *\n * Think of a Transformer as a FunctionSelector that operates on observables\n * instead of values.\n *\n * ```ts\n * import { select$ } from 'angular-redux/store';\n *\n * export const debounceAndTriple = obs$ => obs$\n *  .debounce(300)\n *  .map(x => 3 * x);\n *\n * class Foo {\n *  @select$(['foo', 'bar'], debounceAndTriple)\n *  readonly debouncedFooBar$: Observable<number>;\n * }\n * ```\n */\nfunction select$(selector, transformer, comparator) {\n    return decorate(selector, transformer, comparator);\n}\nexports.select$ = select$;\nfunction decorate(selector, transformer, comparator) {\n    return function decorator(target, key) {\n        function getter() {\n            return helpers_1.getInstanceSelection(this, key, selector, transformer, comparator);\n        }\n        // Replace decorated property with a getter that returns the observable.\n        if (delete target[key]) {\n            Object.defineProperty(target, key, {\n                get: getter,\n                enumerable: true,\n                configurable: true,\n            });\n        }\n    };\n}\n//# sourceMappingURL=select.js.map",null]}